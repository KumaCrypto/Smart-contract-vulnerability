import { loadFixture } from "@nomicfoundation/hardhat-network-helpers";
import { expect } from "chai";
import { ethers } from "hardhat";

import {
  Assembly__factory,
  PragmaVersionLt8__factory,
} from "../typechain-types";

describe("UnderflowOverflow", function () {
  async function assemblyFixture() {
    const [owner] = await ethers.getSigners();

    const assembly = await new Assembly__factory(owner).deploy();
    const pragmaLt8 = await new PragmaVersionLt8__factory(owner).deploy();

    const maxUint256 = ethers.constants.MaxUint256;

    return { assembly, pragmaLt8, owner, maxUint256 };
  }

  describe("Assembly", function () {
    it("Assembly underflow", async function () {
      const { assembly, maxUint256 } = await loadFixture(assemblyFixture);

      await assembly.subBalance(1);
      const balanceAfter = await assembly.getBalance();

      expect(balanceAfter).to.equal(maxUint256);
    });
  });

  describe("Pragma < 8 udnerflow/overflow", function () {
    it("Underflow", async function () {
      const { pragmaLt8, maxUint256 } = await loadFixture(assemblyFixture);

      await pragmaLt8.subBalance(1);
      const balanceAfter = await pragmaLt8.getBalance();

      expect(balanceAfter).to.equal(maxUint256);
    });

    it("Overflow", async function () {
      const { pragmaLt8, maxUint256 } = await loadFixture(assemblyFixture);

      await pragmaLt8.addBalance(maxUint256);
      await pragmaLt8.addBalance(1);

      const balanceAfter = await pragmaLt8.getBalance();

      expect(balanceAfter).to.equal(0);
    });
  });
});
